#!/usr/bin/env python
 
from neopixel import *
import math
import time, colorsys
import numpy as np
import random
import skywriter
import signal
 
LED_PIN        = 18      # GPIO pin connected to the pixels (must support PWM!).
LED_FREQ_HZ    = 800000  # Just leave it at this, normally works!
LED_DMA        = 5       # DMA channel to use for generating signal (try 5)
LED_BRIGHTNESS = 250      # from 0 to 255, keep it low, you don't want to be blinded
LED_INVERT     = False # True to invert the signal (when using NPN transistor level shift)
Width          = 20      # How ever many pixels wide your grid is
Height         = 13       # How ever many pixels wide your grid is
LED_COUNT      = 259      # Total number of LEDs
 
 
ws2812 = Adafruit_NeoPixel(LED_COUNT, LED_PIN, LED_FREQ_HZ, LED_DMA, LED_INVERT, LED_BRIGHTNESS)
ws2812.begin()
 
_rotation = 0
 
#map = [
#  [19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
#  [39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20],
#  [59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40],
#  [79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60],
#  [99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80],
#  [119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100],
#  [139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120],
#  [159,158,157,156,155,154,153,152,151,150,149,148,147,146,145,144,143,142,141,140],
#  [179,178,177,176,175,174,173,172,171,170,169,168,167,166,165,164,163,162,161,160],
#  [199,198,197,196,195,194,193,192,191,190,189,188,187,186,185,184,183,182,181,180],
#  [219,218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200],
#  [239,238,237,236,235,234,233,232,231,230,229,228,227,226,225,224,223,222,221,220],
#  [259,258,257,256,255,254,253,252,251,250,249,248,247,246,245,244,243,242,241,240]
#]
 
#map = [
#  [19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0],
#  [20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],
#  [59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40],
#  [60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],
#  [99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80],
#  [100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],
#  [139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120],
#  [140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159],
#  [179,178,177,176,175,174,173,172,171,170,169,168,167,166,165,164,163,162,161,160],
#  [180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199],
#  [219,218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200],
#  [220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239],
#  [259,258,257,256,255,254,253,252,251,250,249,248,247,246,245,244,243,242,241,240]
#]
 
map = [
  [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],
  [39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20],
  [40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],
  [79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60],
  [80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],
  [119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100],
  [120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139],
  [159,158,157,156,155,154,153,152,151,150,149,148,147,146,145,144,143,142,141,140],
  [160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179],
  [199,198,197,196,195,194,193,192,191,190,189,188,187,186,185,184,183,182,181,180],
  [200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219],
  [239,238,237,236,235,234,233,232,231,230,229,228,227,226,225,224,223,222,221,220],
  [240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259]
]
 
#map = [
#  [7 ,6 ,5 ,4 ,3 ,2 ,1 ,0 ],
#  [8 ,9 ,10,11,12,13,14,15],
#  [23,22,21,20,19,18,17,16],
#  [24,25,26,27,28,29,30,31],
#  [39,38,37,36,35,34,33,32],
#  [40,41,42,43,44,45,46,47],
#  [55,54,53,52,51,50,49,48],
#  [56,57,58,59,60,61,62,63]
#]
 
def xy_to_strip(x, y, strip_len):
    return x * strip_len + y
 
def rotation(r = 0):
  global _rotation
  '''
Set the display rotation valid values:
0
90
180
270
'''
  if r in [0,90,180,270]:
    _rotation = r
    return True
  else:
    raise ValueError('Rotation must be 0, 90, 180 or 270 degrees')
    return
 
 
def get_index_from_xy(x, y):
  '''
Convert an x, y value to an index on the display
'''
  if x > 14 or x < 0:
    raise ValueError('X position must be between 0 and 13')
    return
  if y > 19 or y < 0:
    raise ValueError('Y position must be between 0 and 13')
    return
 
  y = 19-y
 
  if _rotation == 90:
    x,y = 19, 19-x
  if _rotation == 180:
    x,y = 19-x,19-y
  if _rotation == 270:
    x,y = 19-y,x
 
  return map[x][y]
 
def set_pixel(x, y, r, g, b):
  '''
Set a single pixel to RGB colour
'''
  index = get_index_from_xy(x, y)
  if index != None:
    ws2812.setPixelColorRGB(index, r, g, b)
 
def make_gaussian(fwhm, x0, y0):
    x = np.arange(0, 19, 1, float)
    y = x[:, np.newaxis]
    fwhm = fwhm
    gauss = np.exp(-4 * np.log(2) * ((x - x0) ** 2 + (y - y0) ** 2) / fwhm ** 2)
    return gauss
 
#Below Commented, it's meant to flash --- working on it.
#while True:
#   x0, y0 = 3.5, 3.5
#   for z in range(1, 5)[::-1] + range(1, 10):
#       fwhm = 5/z
#       gauss = make_gaussian(fwhm, x0, y0)
#       for y in range(13):
#           for x in range(13):
#               h = 0.8
#               s = 0.8
#               v = gauss[x,y]
#               rgb = colorsys.hsv_to_rgb(h, s, v)
#               r = int(rgb[0] * 255.0)
#               g = int(rgb[1] * 255.0)
#               b = int(rgb[2] * 255.0)
#               set_pixel(x, y, r, g, b)
#       ws2812.show()
#       time.sleep(0.0005)
 
@skywriter.move()
def spot(x, y, z):
    x0 = x * 19
    y0 = y * 13
    h = 0.856
    fwhm = 5.0
    gauss = make_gaussian(fwhm, x0, y0)
    for j in range(19):
        for i in range(13):
                        s = 0.8
                        v = gauss[i,j]
            rgb = colorsys.hsv_to_rgb(h, s, v)
            r = int(rgb[0]*255.0)
            g = int(rgb[1]*255.0)
            b = int(rgb[2]*255.0)
            set_pixel(i, j, r, g, b)
    ws2812.show()
    time.sleep(0.00005)
 
signal.pause()
